<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Note Book</title><link>https://eightzero.site/notebook/</link><description>Recent content in Introduction on Note Book</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://eightzero.site/notebook/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://eightzero.site/notebook/docs/k8s/dashboard/dashborad%E5%AE%89%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eightzero.site/notebook/docs/k8s/dashboard/dashborad%E5%AE%89%E8%A3%85/</guid><description>NodePort部署 # wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml vim recommended.yaml kind: Service apiVersion: v1 metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboard spec: type: NodePort //添加类型为NodePort ports: - port: 443 targetPort: 8443 nodePort: 31010 //映射到宿主机的端口为31010 selector: k8s-app: kubernetes-dashboard //执行yaml文件 $ kubectl apply -f recommended.yaml //查看Pod是否运行 $ kubectl get pod -n kubernetes-dashboard //确保该yaml文件提供的pod都正常运行 $ kubectl get svc -n kubernetes-dashboard 访问 # 创建dashboard的管理用户
$ kubectl create serviceaccount dashboard-admin -n kube-system 绑定用户为集群的管理员
$ kubectl create clusterrolebinding dashboard-cluster-rolebinding --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin 获取刚刚创建的用户Token</description></item><item><title/><link>https://eightzero.site/notebook/docs/k8s/kubectl/kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eightzero.site/notebook/docs/k8s/kubectl/kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>自动补全 # source &amp;lt;(kubectl completion bash) 常用举例 # 生成pod
kubectl run pod --image=nginx --restart=Never --requests= 生成job
kubectl run job --image=nginx --restart=OnFailure 生成deploy
kubectl run deploy --image=nginx --replicas=2 生成svc
kubectl expose deployment sd2 --type=ClusterIP --target-port=80 --name=sd2 生成名称空间
kubectl create ns ns 生成configmap
kubectl create configmap db2 --from-literal=nt=nt 查看 # 查看所有namespace的pods运行情况
kubectl get pods --all-namespaces 查看具体pods，记得后边跟namespace名字哦
kubectl get pods kubernetes-dashboard-76479d66bb-nj8wr --namespace=kube-system 查看pods具体信息
kubectl get pods -o wide kubernetes-dashboard-76479d66bb-nj8wr --namespace=kube-system 查看集群健康状态</description></item><item><title/><link>https://eightzero.site/notebook/docs/Rust/VSCode%E6%8F%92%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eightzero.site/notebook/docs/Rust/VSCode%E6%8F%92%E4%BB%B6/</guid><description>Rust VSCode插件 # 1. rust-analyzer # 实时编译和分析Rust代码，提示代码中的错误，并对类型进行标注。也可以使用官方的rust插件取代
2. rust syntax # 为代码提供语法高亮
3. crates # 帮助分析当前项目的依赖是否是最新的版本
4. better toml # Rust使用toml做项目的配置管理，better toml可以语法高亮，并展示toml文件中的错误
5. rust test lens # 可以快速运行某个Rust测试
6. Tabnine # 基于AI的自动补全</description></item><item><title/><link>https://eightzero.site/notebook/docs/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/Node/Mac%E5%AE%89%E8%A3%85NVM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eightzero.site/notebook/docs/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/Node/Mac%E5%AE%89%E8%A3%85NVM/</guid><description>1.卸载Node.js # 1.1 通过Homebrew安装 # brew uninstall node 1.2 通过官方安装包安装 # 删除 /usr/local/lib 下的任意 node 和 node_modules 的文件或目录 删除 /usr/local/include 下的任意 node 和 node_modules 的文件或目录 删除 Home 目录下的任意 node 和 node_modules 的文件或目录 删除 /usr/local/bin 下的任意 node 的可执行文件 以下三种任选其一。测试 nvm、node、npm 三个命令是否还在
sudo rm -rf /opt/local/bin/node /opt/local/include/node /opt/local/lib/node_modules sudo rm -rf /usr/local/bin/npm /usr/local/share/man/man1/node.1 /usr/local/lib/dtrace/node.d sudo rm -rf /usr/local/{bin/{node,npm},lib/node_modules/npm,lib/node,share/man/*/node.*} sudo rm -rf ~/.npm sudo rm -rf ~/node_modules sudo rm -rf ~/.</description></item><item><title/><link>https://eightzero.site/notebook/docs/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/openyurt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eightzero.site/notebook/docs/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/openyurt/</guid><description>服务类型权限&amp;mdash;和机器标签绑定
api权限
权限最小原则</description></item><item><title/><link>https://eightzero.site/notebook/docs/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/WasmEdge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eightzero.site/notebook/docs/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/WasmEdge/</guid><description>服务类型权限&amp;mdash;和机器标签绑定
api权限
权限最小原则</description></item><item><title/><link>https://eightzero.site/notebook/docs/%E9%97%AE%E9%A2%98%E9%9B%86/%E5%B7%B2%E8%A7%A3%E5%86%B3/issue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eightzero.site/notebook/docs/%E9%97%AE%E9%A2%98%E9%9B%86/%E5%B7%B2%E8%A7%A3%E5%86%B3/issue/</guid><description>问题1：Metrics Server部署失败 # Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Scheduled 14m default-scheduler Successfully assigned kube-system/metrics-server-7898cc74cb-jdwps to master Normal Pulling 14m kubelet Pulling image &amp;#34;k8s.gcr.io/metrics-server/metrics-server:v0.5.2&amp;#34; Normal Pulled 13m kubelet Successfully pulled image &amp;#34;k8s.gcr.io/metrics-server/metrics-server:v0.5.2&amp;#34; in 16.557781304s Normal Created 13m kubelet Created container metrics-server Normal Started 13m kubelet Started container metrics-server Warning Unhealthy 3m54s (x57 over 13m) kubelet Readiness probe failed: HTTP probe failed with statuscode: 500 修改components.</description></item><item><title/><link>https://eightzero.site/notebook/docs/%E9%97%AE%E9%A2%98%E9%9B%86/%E5%BE%85%E7%A1%AE%E8%AE%A4/ISSUE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eightzero.site/notebook/docs/%E9%97%AE%E9%A2%98%E9%9B%86/%E5%BE%85%E7%A1%AE%E8%AE%A4/ISSUE/</guid><description>yurtctl convert错误 # [root@master ~]# yurtctl convert --provider kubeadm --kubeadm-conf-path /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf --cloud-nodes master I1201 02:01:31.538410 42272 convert.go:318] mark master as the cloud-node I1201 02:02:51.677158 42272 util.go:543] servant job(yurtctl-disable-node-controller-master) has succeeded I1201 02:02:51.677200 42272 convert.go:343] complete disabling node-controller I1201 02:02:51.678398 42272 convert.go:443] kube-public/cluster-info configmap already exists, skip to prepare it I1201 02:02:51.690122 42272 convert.go:408] deploying the yurt-hub and resetting the kubelet service on edge nodes... E1201 02:04:51.694906 42272 util.go:540] fail to run servant job(yurtctl-servant-convert-node1): wait for job to be complete timeout I1201 02:04:51.</description></item></channel></rss>